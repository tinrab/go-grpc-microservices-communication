// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session.proto

/*
Package session is a generated protocol buffer package.

It is generated from these files:
	session.proto

It has these top-level messages:
	SessionRequest
	SessionResponse
	SignInRequest
	SignInResponse
*/
package session

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *SessionRequest) Reset()                    { *m = SessionRequest{} }
func (m *SessionRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()               {}
func (*SessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SessionRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type SessionResponse struct {
	Token      string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	CreatedAt  uint64 `protobuf:"varint,2,opt,name=createdAt" json:"createdAt,omitempty"`
	Expiration uint64 `protobuf:"varint,3,opt,name=expiration" json:"expiration,omitempty"`
}

func (m *SessionResponse) Reset()                    { *m = SessionResponse{} }
func (m *SessionResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()               {}
func (*SessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SessionResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SessionResponse) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SessionResponse) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type SignInRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *SignInRequest) Reset()                    { *m = SignInRequest{} }
func (m *SignInRequest) String() string            { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()               {}
func (*SignInRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SignInRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type SignInResponse struct {
	Token      string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Expiration uint64 `protobuf:"varint,2,opt,name=expiration" json:"expiration,omitempty"`
}

func (m *SignInResponse) Reset()                    { *m = SignInResponse{} }
func (m *SignInResponse) String() string            { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()               {}
func (*SignInResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignInResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SignInResponse) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func init() {
	proto.RegisterType((*SessionRequest)(nil), "session.SessionRequest")
	proto.RegisterType((*SessionResponse)(nil), "session.SessionResponse")
	proto.RegisterType((*SignInRequest)(nil), "session.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "session.SignInResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := grpc.Invoke(ctx, "/session.Session/GetSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := grpc.Invoke(ctx, "/session.Session/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	GetSession(context.Context, *SessionRequest) (*SessionResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Session_GetSession_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Session_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2e,
	0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x54, 0xb8,
	0xf8, 0x82, 0x21, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xd2,
	0xe2, 0xd4, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x29, 0x95, 0x8b, 0x1f,
	0xae, 0xaa, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x84, 0x8b, 0xb5, 0x24, 0x3f, 0x3b, 0x35,
	0x0f, 0xaa, 0x0e, 0xc2, 0x11, 0x92, 0xe1, 0xe2, 0x4c, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x4d, 0x71,
	0x2c, 0x91, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x42, 0x08, 0x08, 0xc9, 0x71, 0x71, 0xa5, 0x56,
	0x14, 0x64, 0x16, 0x25, 0x96, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x83, 0xa5, 0x91, 0x44, 0x94, 0x94,
	0xb9, 0x78, 0x83, 0x33, 0xd3, 0xf3, 0x3c, 0xf1, 0xba, 0xc5, 0x8d, 0x8b, 0x0f, 0xa6, 0x08, 0xaf,
	0x53, 0x50, 0x2d, 0x63, 0x42, 0xb7, 0xcc, 0xa8, 0x93, 0x91, 0x8b, 0x1d, 0xea, 0x29, 0x21, 0x47,
	0x2e, 0x2e, 0xf7, 0xd4, 0x12, 0x18, 0x4f, 0x5c, 0x0f, 0x16, 0x58, 0xa8, 0x41, 0x23, 0x25, 0x81,
	0x29, 0x01, 0x71, 0x82, 0x12, 0x83, 0x90, 0x35, 0x17, 0x1b, 0xc4, 0x59, 0x42, 0x62, 0x08, 0x55,
	0xc8, 0x9e, 0x91, 0x12, 0xc7, 0x10, 0x87, 0x69, 0x4e, 0x62, 0x03, 0xc7, 0x8a, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0xc7, 0x96, 0x09, 0xa6, 0x01, 0x00, 0x00,
}
