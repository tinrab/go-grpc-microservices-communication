// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multiply.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MultiplyRequest struct {
	A float64 `protobuf:"fixed64,1,opt,name=a" json:"a,omitempty"`
	B float64 `protobuf:"fixed64,2,opt,name=b" json:"b,omitempty"`
}

func (m *MultiplyRequest) Reset()                    { *m = MultiplyRequest{} }
func (m *MultiplyRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiplyRequest) ProtoMessage()               {}
func (*MultiplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MultiplyRequest) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *MultiplyRequest) GetB() float64 {
	if m != nil {
		return m.B
	}
	return 0
}

type MultiplyResponse struct {
	Result float64 `protobuf:"fixed64,1,opt,name=result" json:"result,omitempty"`
}

func (m *MultiplyResponse) Reset()                    { *m = MultiplyResponse{} }
func (m *MultiplyResponse) String() string            { return proto.CompactTextString(m) }
func (*MultiplyResponse) ProtoMessage()               {}
func (*MultiplyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MultiplyResponse) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*MultiplyRequest)(nil), "pb.MultiplyRequest")
	proto.RegisterType((*MultiplyResponse)(nil), "pb.MultiplyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MultiplicationService service

type MultiplicationServiceClient interface {
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error)
}

type multiplicationServiceClient struct {
	cc *grpc.ClientConn
}

func NewMultiplicationServiceClient(cc *grpc.ClientConn) MultiplicationServiceClient {
	return &multiplicationServiceClient{cc}
}

func (c *multiplicationServiceClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error) {
	out := new(MultiplyResponse)
	err := grpc.Invoke(ctx, "/pb.MultiplicationService/Multiply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MultiplicationService service

type MultiplicationServiceServer interface {
	Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error)
}

func RegisterMultiplicationServiceServer(s *grpc.Server, srv MultiplicationServiceServer) {
	s.RegisterService(&_MultiplicationService_serviceDesc, srv)
}

func _MultiplicationService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplicationServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MultiplicationService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplicationServiceServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultiplicationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MultiplicationService",
	HandlerType: (*MultiplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _MultiplicationService_Multiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiply.proto",
}

func init() { proto.RegisterFile("multiply.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2d, 0xcd, 0x29,
	0xc9, 0x2c, 0xc8, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2,
	0xe5, 0xe2, 0xf7, 0x85, 0x8a, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x70, 0x31,
	0x26, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x06, 0x31, 0x26, 0x82, 0x78, 0x49, 0x12, 0x4c, 0x10,
	0x5e, 0x92, 0x92, 0x16, 0x97, 0x00, 0x42, 0x79, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x18,
	0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x09, 0x54, 0x13, 0x94, 0x67, 0x14, 0xc0, 0x25, 0x0a,
	0x55, 0x9b, 0x99, 0x9c, 0x58, 0x92, 0x99, 0x9f, 0x17, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a,
	0x64, 0xce, 0xc5, 0x01, 0x33, 0x44, 0x48, 0x58, 0xaf, 0x20, 0x49, 0x0f, 0xcd, 0x05, 0x52, 0x22,
	0xa8, 0x82, 0x10, 0x7b, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xee, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0xb1, 0x58, 0x87, 0xc9, 0x00, 0x00, 0x00,
}
